version: "3.9"

services:
  db:
    container_name: db
    restart: always
    # image: rhel8/postgresql-12
    image: postgres:14-alpine
    # restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=api-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db-net

  backend:
    restart: always
    container_name: backend
    build:
      context: ./backend/
      dockerfile: Dockerfile
    # command: python manage.py runserver 0.0.0.0:8000
    # command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000
    # command: >
    #   sh -c   "python manage.py makemigrations &&
    #           python manage.py migrate && 
    #           python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    environment:
      - ALLOWED_HOSTS=localhost 127.0.0.1
      - CORS_ALLOWED_ORIGINS=http://localhost:3000 http://127.0.0.1:3000 127.0.0.1:3000 localhost:3000
      - DEBUG=1
      - SECRET_KEY=thisisareallysecretkeypleasechangeme
      - POSTGRES_DB=api-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - backend_volume:/usr/src/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db-net
  
  frontend:
    restart: always
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    command: npm run dev -- --host 0.0.0.0
    ports:
      - "3000:3000"
    volumes:
      - frontend_volume:/usr/src/app
    depends_on:
      - backend

volumes:
  postgres-data:
    driver: local
  backend_volume:
  frontend_volume:

networks:
  db-net:
    driver: bridge